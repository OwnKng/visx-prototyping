[{"/Users/owenking/web-development/visx-test/src/index.js":"1","/Users/owenking/web-development/visx-test/src/reportWebVitals.js":"2","/Users/owenking/web-development/visx-test/src/components/App.js":"3","/Users/owenking/web-development/visx-test/src/components/ScatterPlot.js":"4","/Users/owenking/web-development/visx-test/src/components/EconFundamentals.js":"5","/Users/owenking/web-development/visx-test/src/components/MultiLineChart.js":"6","/Users/owenking/web-development/visx-test/src/components/gdpPerCap.js":"7","/Users/owenking/web-development/visx-test/src/components/gdpPerCapLifeExp.js":"8","/Users/owenking/web-development/visx-test/src/components/FacetGrid.js":"9","/Users/owenking/web-development/visx-test/src/components/LineChart.js":"10"},{"size":157,"mtime":1608476407923,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1608323154253,"results":"13","hashOfConfig":"12"},{"size":1977,"mtime":1608850196994,"results":"14","hashOfConfig":"12"},{"size":9760,"mtime":1608587902906,"results":"15","hashOfConfig":"12"},{"size":49008,"mtime":1608567322940,"results":"16","hashOfConfig":"12"},{"size":6526,"mtime":1608567080910,"results":"17","hashOfConfig":"12"},{"size":20778,"mtime":1608565783924,"results":"18","hashOfConfig":"12"},{"size":50338,"mtime":1608816469845,"results":"19","hashOfConfig":"12"},{"size":613,"mtime":1608822664636,"results":"20","hashOfConfig":"12"},{"size":4290,"mtime":1608849968420,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1w2agbe",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},"/Users/owenking/web-development/visx-test/src/index.js",[],["48","49"],"/Users/owenking/web-development/visx-test/src/reportWebVitals.js",[],"/Users/owenking/web-development/visx-test/src/components/App.js",[],"/Users/owenking/web-development/visx-test/src/components/ScatterPlot.js",["50"],"import React, { useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { scaleLinear, scaleLog, scaleOrdinal } from \"@visx/scale\";\nimport {\n  LegendOrdinal,\n  LegendItem,\n  LegendLabel,\n  LegendSize,\n} from \"@visx/legend\";\nimport { Group } from \"@visx/group\";\nimport * as d3 from \"d3\";\nimport { Circle } from \"@visx/shape\";\nimport { Axis, AxisLeft, AxisBottom } from \"@visx/axis\";\nimport { GridColumns } from \"@visx/grid\";\nimport { TooltipWithBounds, withTooltip, defaultStyles } from \"@visx/tooltip\";\nimport { localPoint } from \"@visx/event\";\nimport { voronoi } from \"@visx/voronoi\";\nimport styled from \"styled-components\";\nimport { fundamentals } from \"./EconFundamentals\";\nimport { Text } from \"@visx/text\";\n\nconst Graph = styled.div`\n  background: #0f0e17;\n  color: #a7a9be;\n\n  svg {\n    text {\n      fill: #a7a9be;\n      font-size: 14px;\n    }\n  }\n`;\n\nconst tooltipStyles = {\n  ...defaultStyles,\n  background: `rgba(15, 14, 23, 0.5)`,\n  border: \"1px solid #a7a9be\",\n  color: \"#a7a9be\",\n  fontSize: \"14px\",\n  padding: \"0.8rem\",\n};\n\nexport const ScatterPlot = ({\n  width,\n  height,\n  showTooltip,\n  hideTooltip,\n  tooltipData,\n  tooltipOpen,\n  tooltipTop = 0,\n  tooltipLeft = 0,\n  margin = { top: 30, left: 60, right: 40, bottom: 40 },\n}) => {\n  const data = fundamentals;\n  // set the dimensions of the plot\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const legendGlyphSize = 10;\n\n  const svgRef = useRef(null);\n  let tooltipTimeout;\n\n  // accessors\n  const x = (d) => d.gdpPerCap;\n  const y = (d) => d.lifeExpectancy;\n  const fill = (d) => d.region;\n  const radius = (d) => d.population;\n\n  // scales\n  const xScale = scaleLog({\n    range: [margin.left, innerWidth + margin.left],\n    domain: d3.extent(data, x),\n  });\n\n  const yScale = scaleLinear({\n    range: [innerHeight + margin.top, margin.top],\n    domain: d3.extent(data, y),\n    nice: true,\n  });\n\n  const fillScale = scaleOrdinal({\n    domain: [...new Set(data.map(fill))],\n    range: [\"#ff8906\", \"#f25f4c\", \"#e53170\", \"#7f5af0\", \"#2cb67d\"],\n  });\n\n  const rScale = scaleLinear({\n    range: [3, 30],\n    domain: d3.extent(data, radius),\n  });\n\n  // Event handlers for tooltips\n  const voronoiLayout = useMemo(\n    () =>\n      voronoi({\n        x: (d) => xScale(x(d)) ?? 0,\n        y: (d) => yScale(y(d)) ?? 0,\n        width,\n        height,\n      })(data),\n    [data, width, height, xScale, yScale]\n  );\n\n  const handleMouseMove = useCallback(\n    (event) => {\n      if (tooltipTimeout) clearTimeout(tooltipTimeout);\n      if (!svgRef.current) return;\n\n      // find the nearest polygon to the current mouse position\n      const point = localPoint(svgRef.current, event);\n      if (!point) return;\n      const neighborRadius = 100;\n      const closest = voronoiLayout.find(point.x, point.y, neighborRadius);\n      if (closest) {\n        showTooltip({\n          tooltipLeft: xScale(x(closest.data)),\n          tooltipTop: yScale(y(closest.data)),\n          tooltipData: closest.data,\n        });\n      }\n    },\n    [xScale, yScale, showTooltip, voronoiLayout, tooltipTimeout]\n  );\n\n  const handleMouseLeave = useCallback(() => {\n    tooltipTimeout = window.setTimeout(() => {\n      hideTooltip();\n    }, 300);\n  }, [hideTooltip]);\n\n  // Sort the data so that the largest populations are plotted first\n  useEffect(() => {\n    data.sort((a, b) => b.population - a.population);\n  }, [data]);\n\n  return (\n    <Graph>\n      <LegendOrdinal scale={fillScale} labelFormat={(label) => `${label}`}>\n        {(labels) => (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              position: \"absolute\",\n              right: \"10%\",\n              top: \"60%\",\n              border: \"1px solid white\",\n              borderRadius: \"5px\",\n              padding: \"0.5rem\",\n            }}\n          >\n            <div>Region</div>\n            {labels.map((label, i) => (\n              <LegendItem key={i} margin='0 10px'>\n                <svg width={legendGlyphSize} height={legendGlyphSize}>\n                  <rect\n                    fill={label.value}\n                    width={legendGlyphSize}\n                    height={legendGlyphSize}\n                    rx={5}\n                  />\n                </svg>\n                <LegendLabel\n                  style={{ color: \"#a7a9be\", margin: `0 0 0 10px` }}\n                  align='left'\n                >\n                  {label.text}\n                </LegendLabel>\n              </LegendItem>\n            ))}\n          </div>\n        )}\n      </LegendOrdinal>\n      <LegendSize scale={rScale}>\n        {(labels) => (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              position: \"absolute\",\n              right: \"30%\",\n              top: \"60%\",\n              border: \"1px solid white\",\n              borderRadius: \"5px\",\n              padding: \"0.5rem\",\n            }}\n          >\n            <div>Population</div>\n            {labels.map((label) => {\n              const size = rScale(label.datum) ?? 0;\n              return (\n                <LegendItem key={`legend-${label.text}-${label.index}`}>\n                  <svg width={size} height={size} style={{ margin: \"5px 1px\" }}>\n                    <circle\n                      fill='transparent'\n                      stroke='white'\n                      r={size / 3}\n                      cx={size / 3}\n                      cy={size / 3}\n                    />\n                  </svg>\n                  <LegendLabel align='left' margin='0 4px'>\n                    {d3.format(\",.2r\")(Math.ceil(label.text))}\n                  </LegendLabel>\n                </LegendItem>\n              );\n            })}\n          </div>\n        )}\n      </LegendSize>\n      <svg width={width} height={height} ref={svgRef}>\n        <rect\n          width={width}\n          height={height}\n          fill={\"transparent\"}\n          onMouseMove={handleMouseMove}\n          onMouseLeave={handleMouseLeave}\n          onTouchMove={handleMouseMove}\n          onTouchEnd={handleMouseLeave}\n        />\n        <AxisLeft\n          scale={yScale}\n          left={margin.left}\n          tickStroke='#a7a9be'\n          stroke='#a7a9be'\n          label='Life expectancy'\n        />\n        <Axis\n          orientation='top'\n          scale={xScale}\n          top={margin.top}\n          tickFormat={d3.format(\"~s\")}\n          numTicks={2}\n          tickStroke='transparent'\n          stroke='transparent'\n        />\n        <AxisBottom\n          scale={xScale}\n          top={innerHeight + margin.top}\n          tickFormat={d3.format(\"$~s\")}\n          numTicks={2}\n          tickStroke='#a7a9be'\n          stroke='#a7a9be'\n          label='GDP per cap'\n        />\n        <GridColumns\n          top={margin.top}\n          scale={xScale}\n          height={innerHeight}\n          strokeDasharray='1,3'\n          stroke='#fffffe'\n          strokeOpacity={0.5}\n          pointerEvents='none'\n          numTicks={2}\n        />\n        <Group pointerEvents='none'>\n          {data.map((point, i) => (\n            <Circle\n              key={i}\n              cx={xScale(x(point))}\n              cy={yScale(y(point))}\n              r={rScale(radius(point))}\n              fill={fillScale(fill(point))}\n              fillOpacity={0.8}\n              stroke={\n                tooltipData === point ? \"#fffffe\" : fillScale(fill(point))\n              }\n            />\n          ))}\n        </Group>\n        <Text\n          x={width * 0.75}\n          width={width}\n          textAnchor='middle'\n          y={yScale(51)}\n          style={{ fontSize: \"1.2rem\" }}\n        >\n          Rich &rarr;\n        </Text>\n        <Text\n          x={width / 2}\n          width={width}\n          textAnchor='middle'\n          y={yScale(51)}\n          style={{ fontSize: \"3rem\" }}\n        >\n          INCOME\n        </Text>\n        <Text\n          x={width * 0.25}\n          width={width}\n          textAnchor='middle'\n          y={yScale(51)}\n          style={{ fontSize: \"1.2rem\" }}\n        >\n          &larr; Poor\n        </Text>\n        <Text\n          x={xScale(270)}\n          width={height}\n          textAnchor='middle'\n          angle={270}\n          y={height * 0.25}\n          style={{ fontSize: \"1.2rem\" }}\n        >\n          Healthy &rarr;\n        </Text>\n        <Text\n          x={xScale(270)}\n          width={height}\n          angle={270}\n          textAnchor='middle'\n          y={height / 2}\n          style={{ fontSize: \"3rem\" }}\n        >\n          HEALTH\n        </Text>\n        <Text\n          x={xScale(270)}\n          width={height}\n          textAnchor='middle'\n          angle={270}\n          y={height * 0.75}\n          style={{ fontSize: \"1.2rem\" }}\n        >\n          &larr; Sick\n        </Text>\n      </svg>\n      {tooltipOpen && tooltipData && tooltipLeft != null && tooltipTop != null && (\n        <TooltipWithBounds\n          left={tooltipLeft + 10}\n          top={tooltipTop + 10}\n          style={tooltipStyles}\n        >\n          <div\n            style={{\n              color: fillScale(fill(tooltipData)),\n              padding: \"0 0 0.5rem 0\",\n            }}\n          >\n            <strong>{tooltipData.country}</strong>\n          </div>\n          <div>\n            <strong>GDP per cap:</strong>\n            {\" $\"}\n            {`${d3.format(\".2~s\")(x(tooltipData))}`}\n          </div>\n          <div>\n            <strong>Life Expectancy</strong> {Math.round(y(tooltipData))}\n          </div>\n          <div>\n            <strong>Population</strong> {`${Math.round(radius(tooltipData))}m`}\n          </div>\n        </TooltipWithBounds>\n      )}\n    </Graph>\n  );\n};\n\nexport default withTooltip(ScatterPlot);\n",["51","52"],"/Users/owenking/web-development/visx-test/src/components/EconFundamentals.js",[],"/Users/owenking/web-development/visx-test/src/components/MultiLineChart.js",[],["53","54"],"/Users/owenking/web-development/visx-test/src/components/gdpPerCap.js",[],"/Users/owenking/web-development/visx-test/src/components/gdpPerCapLifeExp.js",[],["55","56"],"/Users/owenking/web-development/visx-test/src/components/FacetGrid.js",[],"/Users/owenking/web-development/visx-test/src/components/LineChart.js",["57"],"import { useCallback } from \"react\";\nimport { AxisLeft, AxisBottom } from \"@visx/axis\";\nimport { Text } from \"@visx/text\";\nimport { GridRows } from \"@visx/grid\";\nimport { scaleLinear } from \"@visx/scale\";\nimport { LinePath, AreaClosed } from \"@visx/shape\";\nimport { curveLinear } from \"@visx/curve\";\nimport { format, max } from \"d3\";\nimport { localPoint } from \"@visx/event\";\nimport { withTooltip, TooltipWithBounds } from \"@visx/tooltip\";\n\nconst Line = ({\n  width,\n  height,\n  data,\n  dataKey,\n  x,\n  y,\n  margin = { left: 30, right: 20, top: 40, bottom: 25 },\n  showTooltip,\n  hideTooltip,\n  tooltipData,\n  tooltipLeft = 0,\n  tooltipTop = 0,\n}) => {\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  // create accessor functions\n  const xAccessor = (d) => d[x];\n  const yAccessor = (d) => d[y];\n\n  // create scales\n  const xScale = scaleLinear({\n    range: [margin.left, innerWidth + margin.left],\n    domain: [1960, 2019],\n    nice: true,\n  });\n\n  const yScale = scaleLinear({\n    range: [innerHeight + margin.top, margin.top],\n    domain: [0, 60000],\n    nice: true,\n  });\n\n  // Handle the tooltip\n  const handleTooltip = useCallback(\n    (event) => {\n      const { x } = localPoint(event) || { x: 0 };\n      let x0 = xScale.invert(x);\n      x0 = Math.round(x0);\n      if (x0 === 2020) x0 = 2019;\n      let d = data.filter((row) => row.year === x0);\n      let yMax = max(d, yAccessor);\n\n      showTooltip({\n        tooltipData: d,\n        tooltipLeft: xScale(x0),\n        tooltipTop: yScale(yMax),\n      });\n    },\n    [data, yAccessor, showTooltip, yScale, xScale]\n  );\n\n  return (\n    <>\n      <svg width={width} height={height}>\n        <Text\n          x={width / 2}\n          width={width}\n          textAnchor='middle'\n          y={margin.top / 2}\n          style={{ fontSize: \"1rem\" }}\n        >\n          {dataKey}\n        </Text>\n        <rect\n          x={margin.left}\n          y={margin.top}\n          width={innerWidth}\n          height={innerHeight}\n          fill='#f4f7f9'\n        />\n        <GridRows\n          scale={yScale}\n          width={innerWidth}\n          height={height - margin.top - margin.bottom}\n          left={margin.left}\n          stroke='white'\n          numTicks={6}\n        />\n        <AxisBottom\n          scale={xScale}\n          top={innerHeight + margin.top}\n          tickFormat={format(\"d\")}\n          tickStroke='#a7a9be'\n          stroke='#a7a9be'\n          numTicks={innerWidth < 100 ? 1 : 4}\n        />\n        <AreaClosed\n          data={data}\n          x={(d) => xScale(xAccessor(d))}\n          y={(d) => yScale(yAccessor(d))}\n          yScale={yScale}\n          strokeWidth={2}\n          curve={curveLinear}\n          fill='#9bbce0'\n        />\n        <LinePath\n          data={data}\n          x={(d) => xScale(xAccessor(d))}\n          y={(d) => yScale(yAccessor(d))}\n          stroke='#061E39'\n          strokeWidth={2}\n          curve={curveLinear}\n        />\n        <AxisLeft\n          scale={yScale}\n          left={margin.left + 10}\n          numTicks={5}\n          top={-2}\n          tickLabelProps={() => ({ fill: \"#292f31\", fontSize: 10 })}\n          hideAxisLine={true}\n          hideTicks={true}\n          tickFormat={(v, t) => (t === 6 ? \"\" : format(\"~s\")(v))}\n        />\n        <rect\n          x={margin.left}\n          y={margin.top}\n          width={innerWidth}\n          height={innerHeight}\n          fill='transparent'\n          onTouchStart={handleTooltip}\n          onTouchMove={handleTooltip}\n          onMouseMove={handleTooltip}\n          onMouseLeave={() => hideTooltip()}\n        />\n        {tooltipData &&\n          tooltipData.map((row) => (\n            <circle\n              cx={xScale(xAccessor(row))}\n              cy={yScale(yAccessor(row))}\n              r={5}\n              stroke='#FFFFFE'\n              fill='black'\n              strokeWidth={1}\n              pointerEvents='none'\n            />\n          ))}\n      </svg>\n      {tooltipData && (\n        <TooltipWithBounds\n          key={Math.random()}\n          top={tooltipTop - 12}\n          left={tooltipLeft + 12}\n        >\n          {tooltipData.map((row) => format(\"$.2~s\")(row[y]))}\n        </TooltipWithBounds>\n      )}\n    </>\n  );\n};\n\nexport default withTooltip(Line);\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":124,"column":22,"nodeType":"64","endLine":126,"endColumn":12},{"ruleId":"58","replacedBy":"65"},{"ruleId":"60","replacedBy":"66"},{"ruleId":"58","replacedBy":"67"},{"ruleId":"60","replacedBy":"68"},{"ruleId":"58","replacedBy":"69"},{"ruleId":"60","replacedBy":"70"},{"ruleId":"62","severity":1,"message":"71","line":31,"column":9,"nodeType":"72","endLine":31,"endColumn":32,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react-hooks/exhaustive-deps","Assignments to the 'tooltipTimeout' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","CallExpression",["74"],["75"],["74"],["75"],["74"],["75"],"The 'yAccessor' function makes the dependencies of useCallback Hook (at line 62) change on every render. To fix this, wrap the definition of 'yAccessor' in its own useCallback() Hook.","VariableDeclarator",["76"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Wrap the definition of 'yAccessor' in its own useCallback() Hook.",{"range":"79","text":"80"},[853,864],"useCallback((d) => d[y])"]